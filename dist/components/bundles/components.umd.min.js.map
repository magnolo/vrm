{"version":3,"sources":["ng://components/lib/components.service.ts","ng://components/lib/components.component.html","ng://components/lib/components.component.ts","ng://components/lib/components.module.ts"],"names":["ComponentsService","factory","ɵfac","providedIn","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵstyleProp","i0.ɵɵclassProp","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵtemplate","i0.ɵɵproperty","ComponentsComponent","renderer","this","content","title","value","text","backgroundColor","header","list","activeIdx","lastIdx","prototype","ngOnInit","ngAfterViewInit","flipper","Flip","node","number","nativeElement","from","delay","setActive","idx","rotation","length","difference","animationDuration","plane","planeWrap","path","ringBg","getTotalLength","setStyle","flipTo","to","height","steps","toArray","scrollHeight","recruitmentText","arrow","core","ɵɵdirectiveInject","Renderer2","selectors","viewQuery","rf","ctx","i0.ɵɵelement","i0.ɵɵnamespaceSVG","i0.ɵɵnamespaceHTML","ComponentsModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentsService {\n\n  constructor() { }\n}\n","<section class=\"recruitment-process\">\n    <div class=\"grid\"></div>\n    <div class=\"grid\">\n  \n      <div class=\"recruitment-wrap\">\n        <div class=\"plane\">\n          <div\n            #planeWrap\n            [class.reverse]=\"lastIdx > activeIdx\"\n            class=\"plane-wrap\">\n            <svg\n             \n              id=\"arrow\"\n              width=\"60\"\n              height=\"60\"\n              viewBox=\"0 0 60 60\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\">\n              <path  #arrow d=\"M-2.62268e-06 60L60 30L0 -2.62268e-06L7 30L-2.62268e-06 60Z\"></path>\n            </svg>\n  \n          </div>\n        </div>\n  \n        <div class=\"center\">\n          <div\n            #centerWipe\n            class=\"center-wipe\"></div>\n          <div class=\"center-imgs\">\n            <!-- *ngFor=\"let item of content; let idx = index\" -->\n            <div class=\"center-img\">\n              <div #number></div>\n              <div class=\"hint\">Anzahl Studien</div>\n            </div>\n          </div>\n        </div>\n        <div class=\"ring\">\n          <svg>\n            <circle\n              #ringBg\n              class=\"ring-bg animate\"\n              cx=\"50%\"\n              cy=\"50%\"\n              r=\"200\"></circle>\n            <circle\n              class=\"dash\"\n              cx=\"50%\"\n              cy=\"50%\"\n              r=\"200\"></circle>\n          </svg>\n        </div>\n        <div class=\"point-wrap\">\n          <!-- transform: rotate(#{(-360 / 5) * $i}deg), -->\n          <div\n            class=\"point\"\n            (click)=\"setActive(idx)\"\n            [class.active]=\"idx === activeIdx\"\n            [style.transform]=\"'translateY(-50%) rotate(' +((360 / 5) * (idx)) + 'deg)'\"\n            *ngFor=\"let item of content; let idx = index\">\n            <div\n              class=\"point-inner\"\n              [style.transform]=\"' rotate('+ ((-360 / 5) * idx) +'deg)'\"\n              \n              >\n              <div class=\"point-transform\">\n                <span>{{ idx + 1 }}</span>\n              </div>\n            </div>\n          </div>\n  \n        </div>\n      </div>\n  \n      <div\n        #recruitmentText\n        class=\"recruitment-text\" >\n        <div class=\"recruitment-copy\">\n          <div\n            class=\"step\"\n            #steps\n            [class.active]=\"idx === activeIdx\"\n            *ngFor=\"let item of content; let idx = index\">\n            <h3>{{ item.title }}</h3>\n            <h4 *ngIf=\"item.header\">{{ item.header }}</h4>\n            <p>{{ item.text}}</p>\n            <ul *ngIf=\"item.list && item.list.length > 0\">\n              <li *ngFor=\"let entry of item.list\">{{ entry }}</li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"recruitment-controls\">\n          <div\n            class=\"arrow prev\"\n            (click)=\"activeIdx === 0 ? setActive(content.length - 1) :setActive(activeIdx -1)\"></div>\n          <div class=\"dots\">\n            <div\n              class=\"dot\"\n              (click)=\"setActive(idx)\"\n              [class.active]=\"idx === activeIdx\"\n              *ngFor=\"let item of content; let idx  = index\"></div>\n          </div>\n          <div\n            class=\"arrow next\"\n            (click)=\"activeIdx + 1 > content.length - 1 ? setActive(0) : setActive(activeIdx+1)\"></div>\n        </div>\n      </div>\n    </div>\n  </section>\n  ","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  OnInit,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\n\nimport { Flip } from 'number-flip';\n\n@Component({\n  selector: 'vrm-slider',\n  templateUrl: './components.component.html',\n  styleUrls: ['./components.component.scss'],\n})\nexport class ComponentsComponent implements OnInit, AfterViewInit {\n  public content = [\n    {\n      title: 'Design, Tierstudien',\n      value: 152,\n      text: 'Für die EU bei der European Medicines Agency (EMA)',\n      backgroundColor: '#0F6292',\n    },\n    {\n      title: 'Erprobung in vergleichenden Studien mit Freiwilligen',\n      header: 'Phase I',\n      value: 16,\n      list: ['ca. 10-30 Freiwillige', 'Zur prüfen: Verträglichkeit'],\n      backgroundColor: '#1682C3',\n    },\n    {\n      title: 'Erprobung in vergleichenden Studien mit Freiwilligen',\n      header: 'Phase II',\n      value: 10,\n      list: [\n        'ca. 50-500 Freiwillige',\n        'Zur prüfen: Dosierung, Immunantwort vor Ansteckung',\n      ],\n      backgroundColor: '#1682C3',\n    },\n    {\n      title: 'Erprobung in vergleichenden Studien mit Freiwilligen',\n      header: 'Phase III',\n      value: 6,\n      list: [\n        'ca. 1.000-60.000 Freiwillige',\n        'Zur prüfen: Zuverlässigkeit des Schutzes',\n      ],\n      backgroundColor: '#1682C3',\n    },\n    {\n      title: 'Zulassungsverfahren',\n      value: 0,\n      text: 'Für die EU bei der European Medicines Agency (EMA)',\n      backgroundColor: '#48BFFB',\n    },\n  ];\n\n  public activeIdx = 0;\n  public lastIdx = 0;\n  private flipper;\n\n  @ViewChild('ringBg') ringBg: ElementRef;\n  @ViewChild('planeWrap') planeWrap: ElementRef;\n  @ViewChild('recruitmentText') recruitmentText: ElementRef;\n  @ViewChild('centerWipe') centerWipe: ElementRef;\n  @ViewChild('number') number: ElementRef;\n  @ViewChild('arrow') arrow: ElementRef;\n  @ViewChildren('steps') steps: QueryList<ElementRef>;\n  title = 'vrm';\n\n  constructor(private renderer: Renderer2) {}\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit(): void {\n    this.flipper = new Flip({\n      node: this.number.nativeElement,\n      from: this.content[0].value,\n      delay: 1, // second\n    });\n    this.setActive(0);\n  }\n\n  setActive(idx) {\n    this.lastIdx = this.activeIdx;\n    this.activeIdx = idx;\n\n    const rotation = (360 / this.content.length) * this.activeIdx;\n\n    let difference = this.lastIdx - this.activeIdx;\n\n    if (difference < 0) {\n      difference = difference * -1;\n    }\n\n    const animationDuration = 1000 + 300 * difference;\n    const plane = this.planeWrap.nativeElement;\n    const path = this.ringBg.nativeElement;\n    const length = path.getTotalLength();\n\n    this.renderer.setStyle(\n      plane,\n      'transition',\n      animationDuration + 'ms all cubic-bezier(0.645, 0.045, 0.355, 1)'\n    );\n    this.renderer.setStyle(\n      plane,\n      'transform',\n      'translateY(-50%) rotate(' + rotation + 'deg)'\n    );\n\n    this.renderer.setStyle(\n      path,\n      'transition',\n      animationDuration + 'ms all cubic-bezier(0.645, 0.045, 0.355, 1)'\n    );\n    this.renderer.setStyle(path, 'stroke-dasharray', length);\n\n    this.renderer.setStyle(\n      path,\n      'stroke-dashoffset',\n      length - (length / this.content.length) * this.activeIdx\n    );\n\n    this.flipper.flipTo({ to: this.content[this.activeIdx].value });\n\n    const height = this.steps.toArray()[this.activeIdx].nativeElement\n      .scrollHeight;\n\n    this.renderer.setStyle(\n      this.recruitmentText.nativeElement,\n      'height',\n      height + 'px'\n    );\n    this.renderer.setStyle(\n      this.recruitmentText.nativeElement,\n      'background-color',\n      this.content[this.activeIdx].backgroundColor\n    );\n    this.renderer.setStyle(\n      this.arrow.nativeElement,\n      'fill',\n      this.content[this.activeIdx].backgroundColor\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentsComponent } from './components.component';\n\n\n\n@NgModule({\n  declarations: [ComponentsComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [ComponentsComponent]\n})\nexport class ComponentsModule { }\n"]}